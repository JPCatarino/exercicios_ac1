// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2017 17:05:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Mux2N
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Mux2N_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] input0;
reg [31:0] input1;
reg sel;
// wires                                               
wire [31:0] outx;

// assign statements (if any)                          
Mux2N i1 (
// port map - connection between master ports and signals/registers   
	.input0(input0),
	.input1(input1),
	.outx(outx),
	.sel(sel)
);
initial 
begin 
#1000000 $finish;
end 
// input0[ 31 ]
initial
begin
	input0[31] = 1'b1;
end 
// input0[ 30 ]
initial
begin
	input0[30] = 1'b1;
end 
// input0[ 29 ]
initial
begin
	input0[29] = 1'b1;
end 
// input0[ 28 ]
initial
begin
	input0[28] = 1'b1;
end 
// input0[ 27 ]
initial
begin
	input0[27] = 1'b1;
end 
// input0[ 26 ]
initial
begin
	input0[26] = 1'b1;
end 
// input0[ 25 ]
initial
begin
	input0[25] = 1'b1;
end 
// input0[ 24 ]
initial
begin
	input0[24] = 1'b1;
end 
// input0[ 23 ]
initial
begin
	input0[23] = 1'b1;
end 
// input0[ 22 ]
initial
begin
	input0[22] = 1'b1;
end 
// input0[ 21 ]
initial
begin
	input0[21] = 1'b1;
end 
// input0[ 20 ]
initial
begin
	input0[20] = 1'b1;
end 
// input0[ 19 ]
initial
begin
	input0[19] = 1'b1;
end 
// input0[ 18 ]
initial
begin
	input0[18] = 1'b1;
end 
// input0[ 17 ]
initial
begin
	input0[17] = 1'b1;
end 
// input0[ 16 ]
initial
begin
	input0[16] = 1'b1;
end 
// input0[ 15 ]
initial
begin
	input0[15] = 1'b1;
end 
// input0[ 14 ]
initial
begin
	input0[14] = 1'b1;
end 
// input0[ 13 ]
initial
begin
	input0[13] = 1'b1;
end 
// input0[ 12 ]
initial
begin
	input0[12] = 1'b1;
end 
// input0[ 11 ]
initial
begin
	input0[11] = 1'b1;
end 
// input0[ 10 ]
initial
begin
	input0[10] = 1'b1;
end 
// input0[ 9 ]
initial
begin
	input0[9] = 1'b1;
end 
// input0[ 8 ]
initial
begin
	input0[8] = 1'b1;
end 
// input0[ 7 ]
initial
begin
	input0[7] = 1'b1;
end 
// input0[ 6 ]
initial
begin
	input0[6] = 1'b1;
end 
// input0[ 5 ]
initial
begin
	input0[5] = 1'b1;
end 
// input0[ 4 ]
initial
begin
	input0[4] = 1'b1;
end 
// input0[ 3 ]
initial
begin
	input0[3] = 1'b1;
end 
// input0[ 2 ]
initial
begin
	input0[2] = 1'b1;
end 
// input0[ 1 ]
initial
begin
	input0[1] = 1'b1;
end 
// input0[ 0 ]
initial
begin
	input0[0] = 1'b1;
end 
// input1[ 31 ]
initial
begin
	input1[31] = 1'b0;
end 
// input1[ 30 ]
initial
begin
	input1[30] = 1'b0;
end 
// input1[ 29 ]
initial
begin
	input1[29] = 1'b0;
end 
// input1[ 28 ]
initial
begin
	input1[28] = 1'b0;
end 
// input1[ 27 ]
initial
begin
	input1[27] = 1'b0;
end 
// input1[ 26 ]
initial
begin
	input1[26] = 1'b0;
end 
// input1[ 25 ]
initial
begin
	input1[25] = 1'b0;
end 
// input1[ 24 ]
initial
begin
	input1[24] = 1'b0;
end 
// input1[ 23 ]
initial
begin
	input1[23] = 1'b0;
end 
// input1[ 22 ]
initial
begin
	input1[22] = 1'b0;
end 
// input1[ 21 ]
initial
begin
	input1[21] = 1'b0;
end 
// input1[ 20 ]
initial
begin
	input1[20] = 1'b0;
end 
// input1[ 19 ]
initial
begin
	input1[19] = 1'b0;
end 
// input1[ 18 ]
initial
begin
	input1[18] = 1'b0;
end 
// input1[ 17 ]
initial
begin
	input1[17] = 1'b0;
end 
// input1[ 16 ]
initial
begin
	input1[16] = 1'b0;
end 
// input1[ 15 ]
initial
begin
	input1[15] = 1'b0;
end 
// input1[ 14 ]
initial
begin
	input1[14] = 1'b0;
end 
// input1[ 13 ]
initial
begin
	input1[13] = 1'b0;
end 
// input1[ 12 ]
initial
begin
	input1[12] = 1'b0;
end 
// input1[ 11 ]
initial
begin
	input1[11] = 1'b0;
end 
// input1[ 10 ]
initial
begin
	input1[10] = 1'b0;
end 
// input1[ 9 ]
initial
begin
	input1[9] = 1'b0;
end 
// input1[ 8 ]
initial
begin
	input1[8] = 1'b0;
end 
// input1[ 7 ]
initial
begin
	input1[7] = 1'b0;
end 
// input1[ 6 ]
initial
begin
	input1[6] = 1'b0;
end 
// input1[ 5 ]
initial
begin
	input1[5] = 1'b0;
end 
// input1[ 4 ]
initial
begin
	input1[4] = 1'b0;
end 
// input1[ 3 ]
initial
begin
	input1[3] = 1'b0;
end 
// input1[ 2 ]
initial
begin
	input1[2] = 1'b0;
end 
// input1[ 1 ]
initial
begin
	input1[1] = 1'b0;
end 
// input1[ 0 ]
initial
begin
	input1[0] = 1'b0;
end 

// sel
initial
begin
	sel = 1'b0;
	sel = #500000 1'b1;
end 
endmodule

